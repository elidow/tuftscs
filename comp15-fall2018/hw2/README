HW2: Linked Lists
Eli Dow


Acknowledgements: TAs Casey, Ashley, and Eli


Purpose: Writing a LinkedList class that is able to access train stops(objects)


Files:

Name: LinkedList.h
Description: LinkedList.h contains declarations of all the LinkedList functions
			 and attibutes.

Name: LinkedList.cpp
Description: LinkedList.cpp contains all of the functions of LinkedList,
			 including the implemented funtions.

Name: Station.h
Description: Station.h contains declarations of all the Station functions
			 and attibutes.

Name: Station.cpp
Description: Station.cpp contains all of the functions of Station,
			 including the implemented funtions.


How to compile and run your program:

Compiled: make train-conductor
Run: ./train-conductor


Data Structures and Algorithms

	I used LinkedList for this assignment. Using a LinkedList made it easy to
insert stations at the front and remove stations. For the insert_station
function, I would instantiate a new node, assign its info to the input and
pointer to the head, and assign head to the new node. For the remove_station
function, I would instantiate two new nodes. As one went through the list, the 
other would point at the previous. Once the station with the input's info was
found, the previous would point to the other's next. I also checked for cases
in which the list either has 0 or 1 elements.


Details and Explanation of Testing:
	I tested my code by outputting to terminal in various parts of the driver. 
If my code had an error, I would use that to trace my code to the specific
function that it stopped working. In a lot of functions of LinkedList.cpp, 
I had to make sure I was not trying to access or print the last element in the
list